
services:

  # mongo:
  #   image: mongo:5.0
  #   restart: always
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - mongo-data:/data/db
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: example

  # postgres:
  #   image: postgres
  #   restart: always
  #   ports:
  #     - "5433:5432"
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./initdb.sh:/docker-entrypoint-initdb.d/initdb.sh
  #     - postgres-data:/var/lib/postgresql/data
  #   networks:
  #     - default
  #     - public

  otelcol:
    image: otel/opentelemetry-collector-contrib
    volumes:
      - ./opentelemetry/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
    depends_on:
      - tempo
      - prometheus

  alloy:
    image: grafana/alloy:latest
    volumes:
      - "./alloy/config.alloy:/etc/alloy/config.alloy"
      - "./alloy/endpoints.json:/etc/alloy/endpoints.json"
    command: [
      "run",
      "--server.http.listen-addr=0.0.0.0:12345",
      "--stability.level=public-preview",
      "/etc/alloy/config.alloy",
    ]
    ports:
      - "12347:12345" # UI
      - "12348:12348" # collect
      - "6832:6832"
      - "55679:55679"
    networks:
      - default

  tempo:
    image: grafana/tempo:latest
    command: [ "-multitenancy.enabled=true", "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo.yaml
    ports:
      - "14268"  # jaeger ingest
      - "3200"   # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http
      - "9411"   # zipkin

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - "./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-remote-write-receiver'
      - '--enable-feature=native-histograms'
      - '--enable-feature=otlp-write-receiver'
    ports:
      - 9090:9090
    networks:
      - default

  loki: 
    image: grafana/loki:2.9.2
    ports:
      - "3100:3100"
    command: >-
      -config.file=/etc/loki/local-config.yaml
      -boltdb.shipper.compactor.ring.instance-addr=127.0.0.1
      -distributor.ring.instance-addr=127.0.0.1
      -frontend.instance-addr=127.0.0.1
      -index-gateway.ring.instance-addr=127.0.0.1
      -ingester.lifecycler.addr=127.0.0.1
      -query-scheduler.ring.instance-addr=127.0.0.1
      -ruler.ring.instance-addr=127.0.0.1

  promtail:
    image: grafana/promtail:2.9.2
    volumes:
      - ./loki/promtail-config.yaml:/mnt/config/promtail-config.yaml
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers
      - /Users/taufiktriantono/go/src/ottopoint/ottopoint-purchase:/var/log
    command: -config.file=/mnt/config/promtail-config.yaml
    depends_on:
      - loki

  grafana:
    image: grafana/grafana-enterprise
    restart: unless-stopped
    ports:
      - '9000:9000'
    env_file:
      - .env
    volumes:
      - ./grafana/dashboards-provisioning/datasources/all.yml:/etc/grafana/provisioning/datasources/all.yml
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    networks:
      - default

  renderer:
    image: grafana/grafana-image-renderer:latest
    ports:
      - '8081:8081'

volumes:
  postgres-data:
    driver: local
  mongo-data:
    driver: local
  certs:
   driver: local

networks:
  public:
    external: true
  esnet:
    external: true